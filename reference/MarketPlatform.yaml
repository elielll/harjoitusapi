openapi: 3.1.0
info:
  title: MarketPlatform
  version: '1.0'
  summary: API for selling and buying items
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
                example-1:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    get:
      summary: ''
      operationId: get-user
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  id: 142
                  firstName: Alice
                  lastName: Smith
                  email: alice.smith@gmail.com
                  dateOfBirth: '1997-10-31'
                  emailVerified: true
                  signUpDate: '2019-08-24'
  /items:
    parameters: []
    post:
      summary: ''
      operationId: post-items
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
    get:
      summary: ''
      operationId: get-items
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              example-1:
                value:
                  id: 0
                  Title: string
                  Description: string
                  Category: string
                  Location: string
                  Asking price: 0
                  Date of posting: '2019-08-24'
                  Delivery type: string
                  Contact information: string
                  iamage1: string
                  image2: string
                  image3: string
                  imaga4: string
  '/item/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: string
      operationId: get-item-id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              example-1:
                value:
                  id: 0
                  Title: string
                  Description: string
                  Category: string
                  Location: string
                  Asking price: 0
                  Date of posting: '2019-08-24'
                  Delivery type: string
                  Contact information: string
                  iamage1: string
                  image2: string
                  image3: string
                  imaga4: string
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
    put:
      summary: ''
      operationId: put-item-id
      responses:
        '200':
          description: OK
        '304':
          description: Not Modified
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
    delete:
      summary: ''
      operationId: delete-item-id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
    post:
      summary: ''
      operationId: post-item-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: string
  /login:
    post:
      summary: ''
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples:
                example-1:
                  value: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
          text/html:
            schema:
              $ref: '#/components/schemas/login'
            examples: {}
      security:
        - API Key - 1: []
        - API Key - 2: []
      parameters: []
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    Item:
      title: Item
      type: object
      properties:
        id:
          type: integer
        Title:
          type: string
        Description:
          type: string
        Category:
          type: string
        Location:
          type: string
        Asking price:
          type: number
        Date of posting:
          type: string
          format: date
        Delivery type:
          type: string
        Contact information:
          type: string
        image1:
          type: string
        image2:
          type: string
        image3:
          type: string
        imaga4:
          type: string
      required:
        - Title
        - Description
        - Category
        - Location
        - Asking price
        - Date of posting
        - Delivery type
        - Contact information
    login:
      title: login
      type: object
      properties:
        userName:
          type: string
        userPassword:
          type: string
        token:
          type: string
    image:
      title: image
      type: object
      properties:
        image:
          type: array
          items: {}
  securitySchemes:
    API Key - 1:
      type: http
      scheme: bearer
    API Key - 2:
      type: http
      scheme: basic
